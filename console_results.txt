Задания из лекции 37.
========================================================================================

Task 2

2. Создать сериалайзеры для Юзера, Покупки, Товара.
2.1 Создать объект Юзера, Товара, Покупки, связанных между собой (данные передать через data=), прислать мне скрины.
2.2 Получить объекты из базы, передать в сериалайзер без data=, посмотреть, что у них хранится в атрибуте .data.
----------------------------------------

>>> from myapp.api.serializers import ProductSerializer
>>> headphones_serializer=ProductSerializer(data={'name':'headphones', 'description':'bluetooth', 'price':'500','stock_amount':5})
>>> headphones_serializer.is_valid()
True
>>> headphones_serializer.save()    
<Product: 5_headphones>
>>> 
>>> from myapp.models import User
>>> myuser=User.objects.get(id=2)
>>> myuser
<User: user1>
>>> from myapp.api.serializers import PurchaseSerializer         
>>> headphones_purchase_serializer=PurchaseSerializer(data={'client':myuser, 'product':headphones_product, 'product_amount':1}) 
>>> headphones_purchase_serializer.is_valid()                                                                                
False
>>> headphones_purchase_serializer.errors    
{'client': [ErrorDetail(string='Incorrect type. Expected pk value, received User.', code='incorrect_type')], 'product': [ErrorDetail(string='Incorrect type. Expected pk value, received Product.', code='incorrect_type')]}
>>> headphones_purchase_serializer=PurchaseSerializer(data={'client':2, 'product':5, 'product_amount':1})                       
>>> headphones_purchase_serializer.is_valid()
True
>>> headphones_purchase=headphones_purchase_serializer.save()
>>> headphones_purchase                                      
<Purchase: 5_headphones>
>>>


========================================================================================

Task 3

3. Написать сериалайзер для Покупки (новый), который будет хранить вложенный сериалайзер Юзера.
3.1 Получить данные любого товара вместе с данными о юзере. Прислать скрины.
----------------------------------------

>>> from myapp.api.serializers import UserSerializer
>>> from myapp.api.serializers import PurchaseWithUserSerializer
>>> from myapp.models import Purchase
>>> Purchase.objects.all()
<QuerySet [<Purchase: 1_phone>, <Purchase: 2_tv>, <Purchase: 3_tablet>, <Purchase: 4_phone>]>
>>> pur1=Purchase.objects.all().first()
>>> pur1
<Purchase: 1_phone>
>>> pur1s=PurchaseWithUserSerializer(pur1)
>>> pur1s.data
{'client_serializer': OrderedDict([('username', 'user1'), ('wallet', '10000.00')]), 'product': 1, 'product_amount': 1}
>>> 

========================================================================================

Task 4

4. Написать сериалайзер для Юзера, который будет хранить все его Покупки и выдавать их списком из словарей. (many=True)
4.1 Получить данные любого юзера, прислать скрины.
----------------------------------------

from myapp.api.serializers import UserSerializer
from myapp.api.serializers import PurchaseWithUserSerializer
from myapp.api.serializers import UserWithPurchasesSerializer
from myapp.models import Purchase
from myapp.models import User
user3=User.objects.all().first()
user3_serializer=UserWithPurchasesSerializer(user3)
user3_serializer.data
{'username': 'user2', 'wallet': '10000.00', 'purchase': ['3_tablet', '4_phone']}


========================================================================================

Task 5

Дописать сериалайзеры из пунктов 3 и 4 так, чтобы можно было создавать объекты. (Это сложно.)

*Реализовал только для пункта 3*

----------------------------------------

>>> from myapp.api.serializers import PurchaseWithUserSerializer
>>> from myapp.models import Purchase
>>> purchase=Purchase.objects.last()
>>> serializer=PurchaseWithUserSerializer(purchase)
>>> serializer.data
{'client_serializer': OrderedDict([('username', 'user1'), ('wallet', '10000.00')]), 'product': 5, 'product_amount': 1}
>>> new_purchase_ser=PurchaseWithUserSerializer(data={'client':2, 'product':5, 'product_amount':2})
>>> new_purchase_ser.is_valid()
True
>>> new_purchase_ser.save()
<Purchase: 6_headphones>
>>>    
